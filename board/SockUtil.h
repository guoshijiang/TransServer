/*=========================================================
 *文件名称:  SockUtil.c
 *创建日期：2017-2-11
 *修改记录：
 *  2017-2-11  首次创建
 *功能描述：SockUtil
 ===========================================================*/
#ifndef _SOCKUTIL_H_
#define _SOCKUTIL_H_

#ifdef __cplusplus
extern 'C'
{
#endif

#include <unistd.h>
#include <sys/types.h>
#include <fcntl.h>
#include <sys/select.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <stdlib.h>

/*=========================================================
 *函数入参:fd  文件描符符   
 *函数出参:无
 *返回值:  无
 *功能说明:设置I/O为非阻塞模式
 *===========================================================*/
void activate_nonblock(int fd);

/*=========================================================
 *函数入参:  fd  文件描符符   
 *函数出参:无
 *返回值:  无
 *功能说明:设置I/O为阻塞模式
 *===========================================================*/
void deactivate_nonblock(int fd);

/*=========================================================
 *函数入参:  fd  文件描述符 
 *           wait_seconds: 等待超时秒数，如果为0表示不检测超时  
 *函数出参: 无
 *返回值:   成功（未超时）返回0，失败返回-1，超时返回-1并且errno = ETIMEDOUT
 *功能说明: 读超时检测函数，不含读操作
 *===========================================================*/
int read_timeout(int fd, unsigned int wait_seconds);

/*=========================================================
 *函数入参:  fd  文件描述符  
 *           wait_seconds: 等待超时秒数，如果为0表示不检测超时
 *函数出参: 无
 *返回值:   成功（未超时）返回0，失败返回-1，超时返回-1并且errno = ETIMEDOUT
 *功能说明: 写超时检测函数，不含写操作
 *===========================================================*/
int write_timeout(int fd, unsigned int wait_seconds);

/*=========================================================
 *函数入参: fd               套接字  
 *          addr             输出参数，返回对方地址
 *          wait_seconds     等待超时秒数，如果为0表示正常模式
 *函数出参:无
 *返回值:  成功（未超时）返回已连接套接字，超时返回-1并且errno = ETIMEDOUT
 *功能说明:带超时的accept
 *===========================================================*/
int accept_timeout(int fd, struct sockaddr_in *addr, unsigned int wait_seconds);

/*=========================================================
 *函数入参:   fd  套接字   
 *            addr  要连接的对方地址
 *            wait_seconds: 等待超时秒数，如果为0表示正常模式
 *函数出参: 无
 *返回值:  成功（未超时）返回0，失败返回-1，超时返回-1并且errno = ETIMEDOUT
 *功能说明:connect_timeout
 *===========================================================*/
int connect_timeout(int fd, struct sockaddr_in *addr, unsigned int wait_seconds);

 /*=========================================================
 *函数入参: fd     文件描述符             
 *函数出参: buf    读到的送缓冲区  
 *          count  要读的缓冲区的大小
 *返回值: 成功返回count，失败返回-1，读到EOF返回<count
 *功能说明:读取固定字节数
 *===========================================================*/
ssize_t readn(int fd, void *buf, size_t count);

 /*=========================================================
 *函数入参: fd     文件描述符
 *          buf    发送缓冲区
 *          count  要读取的字节数   
 *函数出参:无
 *返回值: 成功返回count，失败返回-1
 *功能说明:发送固定字节数
 *===========================================================*/
ssize_t writen(int fd, const void *buf, size_t count);

/*=========================================================
 *函数入参:   sockfd    套接字   
 *函数出参:   buf: 接收缓冲区   len: 长度
 *返回值:     成功返回>=0，失败返回-1
 *功能说明:仅仅查看套接字缓冲区数据，但不移除数据
 *===========================================================*/
ssize_t recv_peek(int sockfd, void *buf, size_t len);

/*=========================================================
 *函数入参:   
 *函数出参:
 *返回值:
 *功能说明:
 *===========================================================*/
ssize_t readline(int sockfd, void *buf, size_t maxline);


#ifdef __cpluspluse
}
#endif


#endif 
