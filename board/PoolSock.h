/*=========================================================
 *文件名称:  PoolSock.h
 *创建日期：2017-2-10
 *修改记录：
 *  2017-2-10  首次创建
 *功能描述：Socket连接池
 ===========================================================*/
#ifndef _POOLSOCK_H_
#define _POOLSOCK_H_
#ifdef __cplusplus
extern 'C'
{
#endif

//错误码定义  
#define Sck_Ok             	               0
#define Sck_BaseErr   		                 3000

#define Sck_ErrParam                	     (Sck_BaseErr+1)
#define Sck_ErrTimeOut                	   (Sck_BaseErr+2)
#define Sck_ErrPeerClosed                  (Sck_BaseErr+3)
#define Sck_ErrMalloc			   		           (Sck_BaseErr+4)

#define Sck_Err_Pool_CreateConn				     (Sck_BaseErr+20)  //创建连接池 （没有达到最大连接数）
#define Sck_Err_Pool_terminated				     (Sck_BaseErr+21)  //已终止
#define Sck_Err_Pool_GetConn_ValidIsZero	 (Sck_BaseErr+22)  //有效连接数是零
#define Sck_Err_Pool_HaveExist				     (Sck_BaseErr+22)  //连接已经在池中
#define Sck_Err_Pool_ValidBounds			     (Sck_BaseErr+22)  //有效连接数目超过了最大连接数


/*=========================================================
 *函数入参:无   
 *函数出参:无
 *返回值:  成功返回0
 *功能说明:客户端初始化，这个函数并没有实现
 *===========================================================*/
int sckClient_init();

/*=========================================================
 *函数入参:  ip                客户端要连接的服务器的IP地址
 *          port               客户端要连接的服务器的端口号
 *          connecttime        客户端连接服务器的时间
 *函数出参: connfd             客户端连接服务传出的文件描述符
 *返回值:   成功返回0，失败返回-1
 *功能说明:客户端连接服务器
 *===========================================================*/
int sckClient_connect(char *ip, int port, int connecttime, int *connfd);

/*=========================================================
 *函数入参:connfd    高关闭的文件描述符
 *函数出参:无
 *返回值:  成功返回0
 *功能说明:客户端关闭和服务端的连接
 *===========================================================*/
int sckClient_closeconn(int connfd);

/*=========================================================
 *函数入参:    connfd      文件描述符   
 *             sendtime    发送的超时时间
 *             data        发送的数据
 *             datalen     发送的数组的长度
 *函数出参: 无
 *返回值:   成功返回0，失败返回-1
 *功能说明: 客户端发送报文
 *===========================================================*/
int sckClient_send(int connfd, int sendtime, unsigned char *data, int datalen);

/*=========================================================
 *函数入参:   connfd    文件描述符
 *            revtime    接收报文超时时间   
 *函数出参:   out         接收到的报文
 *            outlen     接收到的报文长度
 *返回值:   成功（未超时）返回0，失败返回-1，超时返回-1并且errno = ETIMEDOUT
 *功能说明: 客户端接受报文
 *===========================================================*/
int sckClient_rev(int connfd, int revtime, unsigned char **out, int *outlen); //1

/*=========================================================
 *函数入参:buf   要释放的缓冲区   
 *函数出参:无
 *返回值:  成功返回0
 *功能说明:客户端释放内存
 *===========================================================*/
int sck_FreeMem(void **buf);


/*=========================================================
 *函数入参:无   
 *函数出参:无
 *返回值:  成功返回0，次函数实际上并未实现
 *功能说明:客户端释放
 *===========================================================*/
int sckClient_destroy();


typedef struct _SCKClitPoolParam
{
	char 	serverip[64];
	int 	serverport;
	int 	bounds; //池容量
	int 	connecttime;
	int 	sendtime;
	int 	revtime;
}SCKClitPoolParam;

/*=========================================================
 *函数入参:   
 *函数出参:
 *返回值:
 *功能说明: 客户端socket池初始化
 *===========================================================*/
int sckCltPool_init(void **handle, SCKClitPoolParam *param);

/*=========================================================
 *函数入参:   
 *函数出参:
 *返回值:
 *功能说明: 客户端socket池获取一条连接
 *===========================================================*/ 
int sckCltPool_getConnet(void *handle, int *connfd);


/*=========================================================
 *函数入参:  
 *函数出参:
 *返回值:
 *功能说明:客户端socket池发送数据
 *===========================================================*/
int sckCltPool_send(void *handle, int  connfd,  unsigned char *data, int datalen);

/*=========================================================
 *函数入参:  
 *函数出参:
 *返回值:
 *功能说明:客户端socket池接受数据
 *===========================================================*/
int sckCltPool_rev(void *handle, int  connfd, unsigned char **out, int *outlen); //1

/*=========================================================
 *函数入参:   
 *函数出参:
 *返回值:
 *功能说明:客户端socket池把连接放回socket池中
 *===========================================================*/
int sckCltPool_putConnet(void *handle, int connfd, int validFlag); //0正常 1

/*=========================================================
 *函数入参: 
 *函数出参:
 *返回值:
 *功能说明:客户端socket池销毁连接
 *===========================================================*/
int sckCltPool_destroy(void *handle);

/*=========================================================
 *函数入参: 
 *函数出参:
 *返回值:
 *功能说明:服务器端初始化
 *===========================================================*/
int sckServer_init(char* addr, int port, int *listenfd);

/*=========================================================
 *函数入参:   
 *函数出参:
 *返回值:
 *功能说明:
 *===========================================================*/
int sckServer_accept(int listenfd, int timeout, int *connfd);

/*=========================================================
 *函数入参:  
 *函数出参:
 *返回值:
 *功能说明:服务器端发送报文
 *===========================================================*/
int sckServer_send(int connfd, int timeout, unsigned char *data, int datalen);

/*=========================================================
 *函数入参:  
 *函数出参:
 *返回值:
 *功能说明:服务器端端接受报文
 *===========================================================*/
int sckServer_rev(int  connfd, int timeout, unsigned char **out, int *outlen); //1

/*=========================================================
 *函数入参:  
 *函数出参:
 *返回值:
 *功能说明:
 *===========================================================*/
int sckServer_close(int connfd);

/*=========================================================
 *函数入参:  
 *函数出参:
 *返回值:
 *功能说明:服务器端环境释放
 *===========================================================*/ 
int sckServer_destroy();

#ifdef __cpluspluse
}
#endif


#endif